---
// src/components/Header.astro
export interface Props {
  lang: 'en' | 'fr';
}

const { lang } = Astro.props;

// Navigation items based on language
const navItems = {
  en: [
    { label: 'Services', href: '/en/services' },
    { label: 'Portfolio', href: '/en/portfolio' },
    { label: 'Blog', href: '/en/blog' },
    { label: 'About', href: '/en/about' }
  ],
  fr: [
    { label: 'Services', href: '/fr/services' },
    { label: 'Portfolio', href: '/fr/portfolio' },
    { label: 'Blog', href: '/fr/blog' },
    { label: 'À propos', href: '/fr/about' }
  ]
};

const currentPath = Astro.url.pathname;
const currentLang = lang;
const nav = navItems[currentLang];

// CTA text based on language
const ctaText = {
  en: 'Get Started',
  fr: 'Contact'
};
---

<header class="header">
  <div class="container">
    <div class="header-content">
      <!-- Logo -->
      <a href={`/${lang}/`} class="logo">
        <img src="/logo-bleu.png" alt="blue logo 'BG'" class="logo-image" />
        <span class="logo-text">Bérangère Gallais</span>
      </a>

      <!-- Desktop Navigation -->
      <nav class="nav-desktop" aria-label="Main navigation">
        <ul class="nav-list">
          {nav.map((item) => (
            <li>
              <a 
                href={item.href} 
                class={`nav-link ${currentPath.startsWith(item.href) ? 'nav-link--active' : ''}`}
                aria-current={currentPath.startsWith(item.href) ? 'page' : undefined}
              >
                {item.label}
              </a>
            </li>
          ))}
        </ul>
      </nav>

      <!-- Header Actions -->
      <div class="header-actions">
        <!-- Language Switcher -->
        <div class="language-switcher">
          <button 
            class="lang-toggle" 
            aria-label={lang === 'en' ? 'Switch to French' : 'Switch to English'}
            data-lang-toggle
          >
            <span class={`lang-option ${lang === 'en' ? 'active' : ''}`}>EN</span>
            <span class="lang-separator">/</span>
            <span class={`lang-option ${lang === 'fr' ? 'active' : ''}`}>FR</span>
          </button>
        </div>

        <!-- Theme Toggle -->
        <button 
          class="theme-toggle" 
          aria-label="Toggle theme"
          data-theme-toggle
        >
          <svg class="theme-icon theme-icon--light" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="5"/>
            <line x1="12" y1="1" x2="12" y2="3"/>
            <line x1="12" y1="21" x2="12" y2="23"/>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
            <line x1="1" y1="12" x2="3" y2="12"/>
            <line x1="21" y1="12" x2="23" y2="12"/>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
          </svg>
          <svg class="theme-icon theme-icon--dark" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
          </svg>
        </button>

        <!-- CTA Button -->
        <a href={`/${lang}/contact`} class="btn btn-primary">
          {ctaText[currentLang]}
        </a>

        <!-- Mobile Menu Toggle -->
        <button 
          class="mobile-menu-toggle" 
          aria-label="Toggle mobile menu"
          aria-expanded="false"
          data-mobile-toggle
        >
          <span class="hamburger"></span>
          <span class="hamburger"></span>
          <span class="hamburger"></span>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <nav class="nav-mobile" aria-label="Mobile navigation" data-mobile-nav>
      <ul class="nav-mobile-list">
        {nav.map((item) => (
          <li>
            <a 
              href={item.href} 
              class={`nav-mobile-link ${currentPath.startsWith(item.href) ? 'nav-mobile-link--active' : ''}`}
            >
              {item.label}
            </a>
          </li>
        ))}
        <li class="nav-mobile-cta">
          <a href={`/${lang}/contact`} class="btn btn-primary btn-full">
            {ctaText[currentLang]}
          </a>
        </li>
      </ul>
    </nav>
  </div>
</header>

<style>
  .header {
    position: sticky;
    top: 0;
    background: rgb(var(--color-background) / 0.9);
    backdrop-filter: blur(20px);
    border-bottom: 1px solid rgb(var(--color-border) / 0.2);
    z-index: 100;
    transition: all var(--transition-normal);
  }

  .header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.25rem 0;
    min-height: 4.5rem;
  }

  /* Logo */
  .logo {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    text-decoration: none;
    transition: opacity var(--transition-fast);
  }

  .logo:hover {
    opacity: 0.8;
  }

  .logo-image {
    height: 2.5rem;
    width: auto;
    transition: transform var(--transition-fast);
  }

  .logo:hover .logo-image {
    transform: scale(1.05);
  }

  .logo-text {
    font-family: var(--font-logo);
    font-size: 1.25rem;
    font-weight: 400;
    color: rgb(var(--color-text));
    letter-spacing: -0.02em;
  }

  /* Desktop Navigation */
  .nav-desktop {
    display: none;
  }

  .nav-list {
    display: flex;
    align-items: center;
    gap: 2rem;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .nav-link {
    color: rgb(var(--color-text-muted));
    text-decoration: none;
    font-weight: 500;
    font-size: 0.9rem;
    padding: 0.5rem 0;
    position: relative;
    transition: color var(--transition-fast);
  }

  .nav-link:hover,
  .nav-link--active {
    color: rgb(var(--color-text));
  }

  .nav-link--active::after {
    content: '';
    position: absolute;
    bottom: -1px;
    left: 0;
    right: 0;
    height: 2px;
    background: rgb(var(--color-primary));
    border-radius: 1px;
  }

  /* Header Actions */
  .header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  /* Language Switcher */
  .language-switcher {
    display: none;
  }

  .lang-toggle {
    background: none;
    border: none;
    color: rgb(var(--color-text-muted));
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: var(--radius-sm);
    transition: all var(--transition-fast);
  }

  .lang-toggle:hover {
    background: rgb(var(--color-surface));
    color: rgb(var(--color-text));
  }

  .lang-option.active {
    color: rgb(var(--color-primary));
  }

  .lang-separator {
    margin: 0 0.25rem;
  }

  /* Theme Toggle */
  .theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    background: none;
    border: none;
    color: rgb(var(--color-text-muted));
    cursor: pointer;
    border-radius: var(--radius-md);
    transition: all var(--transition-fast);
  }

  .theme-toggle:hover {
    background: rgb(var(--color-surface));
    color: rgb(var(--color-text));
  }

  .theme-icon {
    transition: opacity var(--transition-fast);
  }

  .theme-icon--dark {
    display: none;
  }

  [data-theme="dark"] .theme-icon--light {
    display: none;
  }

  [data-theme="dark"] .theme-icon--dark {
    display: block;
  }

  /* Mobile Menu Toggle */
  .mobile-menu-toggle {
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    gap: 3px;
  }

  .hamburger {
    width: 100%;
    height: 2px;
    background: rgb(var(--color-text));
    transition: all var(--transition-normal);
    transform-origin: center;
  }

  .mobile-menu-toggle[aria-expanded="true"] .hamburger:nth-child(1) {
    transform: rotate(45deg) translate(3px, 3px);
  }

  .mobile-menu-toggle[aria-expanded="true"] .hamburger:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-toggle[aria-expanded="true"] .hamburger:nth-child(3) {
    transform: rotate(-45deg) translate(3px, -3px);
  }

  /* Mobile Navigation */
  .nav-mobile {
    display: none;
    background: rgb(var(--color-background));
    border-top: 1px solid rgb(var(--color-border));
    padding: 1rem 0;
  }

  .nav-mobile[data-open="true"] {
    display: block;
  }

  .nav-mobile-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .nav-mobile-list li {
    border-bottom: 1px solid rgb(var(--color-border-muted));
  }

  .nav-mobile-list li:last-child {
    border-bottom: none;
  }

  .nav-mobile-link {
    display: block;
    padding: 1rem 0;
    color: rgb(var(--color-text));
    text-decoration: none;
    font-weight: 500;
    transition: color var(--transition-fast);
  }

  .nav-mobile-link:hover,
  .nav-mobile-link--active {
    color: rgb(var(--color-primary));
  }

  .nav-mobile-cta {
    padding-top: 1rem;
    border-bottom: none !important;
  }

  .btn-full {
    width: 100%;
    justify-content: center;
  }

  /* Desktop Styles */
  @media (min-width: 768px) {
    .nav-desktop {
      display: block;
    }

    .language-switcher {
      display: block;
    }

    .mobile-menu-toggle {
      display: none;
    }

    .header-actions .btn {
      display: inline-flex;
    }
  }

  /* Large Desktop */
  @media (min-width: 1024px) {
    .nav-list {
      gap: 2.5rem;
    }

    .header-actions {
      gap: 1.5rem;
    }
  }
</style>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', function() {
    const mobileToggle = document.querySelector('[data-mobile-toggle]');
    const mobileNav = document.querySelector('[data-mobile-nav]');
    
    if (mobileToggle && mobileNav) {
      mobileToggle.addEventListener('click', function() {
        const isOpen = mobileToggle.getAttribute('aria-expanded') === 'true';
        
        mobileToggle.setAttribute('aria-expanded', (!isOpen).toString());
        mobileNav.setAttribute('data-open', (!isOpen).toString());
      });
      
      // Close mobile menu when clicking on a link
      const mobileLinks = mobileNav.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', function() {
          mobileToggle.setAttribute('aria-expanded', 'false');
          mobileNav.setAttribute('data-open', 'false');
        });
      });
    }
    
    // Language switcher functionality
    const langToggle = document.querySelector('[data-lang-toggle]');
    if (langToggle) {
      langToggle.addEventListener('click', function() {
        const currentPath = window.location.pathname;
        const currentLang = currentPath.startsWith('/fr/') ? 'fr' : 'en';
        const newLang = currentLang === 'en' ? 'fr' : 'en';
        
        // Replace language in URL
        const newPath = currentPath.replace(/^\/(en|fr)\//, `/${newLang}/`);
        window.location.href = newPath;
      });
    }
  });
</script>