---
// src/layouts/BaseLayout.astro
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

export interface Props {
  title: string;
  description: string;
  lang?: 'en' | 'fr';
  image?: string;
}

const { title, description, lang = 'en', image = '/og-default.jpg' } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO -->
    <title>{title}</title>
    <link rel="canonical" href={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600;700&family=Lora:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
    
    <!-- Theme initialization script (must be in head to prevent FOUC) -->
    <script is:inline>
      // Theme detection and application
      (function() {
        function getStoredTheme() {
          return localStorage.getItem('theme');
        }
        
        function getSystemTheme() {
          return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }
        
        function applyTheme(theme) {
          document.documentElement.setAttribute('data-theme', theme);
          localStorage.setItem('theme', theme);
        }
        
        // Apply theme immediately
        const storedTheme = getStoredTheme();
        const theme = storedTheme || getSystemTheme();
        applyTheme(theme);
        
        // Listen for system theme changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
          if (!getStoredTheme()) {
            applyTheme(e.matches ? 'dark' : 'light');
          }
        });
      })();
    </script>
  </head>
  <body>
    <Header lang={lang} />
    <main>
      <slot />
    </main>
    <Footer lang={lang} />
    
    <!-- Theme toggle functionality -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const themeToggle = document.querySelector('[data-theme-toggle]');
        
        if (themeToggle) {
          themeToggle.addEventListener('click', function() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            
            // Update toggle button state
            updateThemeToggleState(newTheme);
          });
        }
        
        function updateThemeToggleState(theme: string | null) {
          const toggle = document.querySelector('[data-theme-toggle]');
          if (toggle) {
            toggle.setAttribute('aria-label', 
              theme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode'
            );
          }
        }
        
        // Initialize toggle state
        const currentTheme = document.documentElement.getAttribute('data-theme');
        updateThemeToggleState(currentTheme);
      });
    </script>
  </body>
</html>

<style is:global>
  /* CSS Custom Properties for Theming */
  :root {
    /* Your exact brand colors - Navy & Rose */
    --color-primary: 230 183 212; /* Rose poudré exact #e6b7d4 */
    --color-secondary: 219 112 147; /* Rose plus intense pour contraste */
    --color-accent: 192 132 252; /* Lavande pour accents */
    
    --color-text: 30 58 138; /* Bleu marine pour texte sur fond clair */
    --color-text-muted: 71 85 105; /* Gris bleuté */
    --color-text-inverse: 255 255 255; /* Blanc pour contraste */
    
    --color-background: 255 255 255; /* Fond blanc pour thème clair */
    --color-surface: 248 250 252; /* Blanc cassé pour cards */
    --color-surface-variant: 241 245 249; /* Gris très clair */
    
    --color-border: 226 232 240; /* Bordures claires */
    --color-border-muted: 241 245 249; /* Bordures plus claires */
    
    --color-shadow: 30 58 138; /* Ombres bleu marine */
    
    /* Success, warning, error - adaptés à la palette */
    --color-success: 34 197 94; /* Vert */
    --color-warning: 251 191 36; /* Jaune doré */
    --color-error: 239 68 68; /* Rouge */
    
    /* Fonts */
    --font-logo: 'Lora', Georgia, serif;
    --font-serif: 'Playfair Display', Georgia, 'Times New Roman', serif;
    --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    --font-mono: 'JetBrains Mono', 'Menlo', 'Monaco', 'Courier New', monospace;
    
    /* Spacing scale */
    --space-xs: 0.25rem;
    --space-sm: 0.5rem;
    --space-md: 1rem;
    --space-lg: 1.5rem;
    --space-xl: 2rem;
    --space-2xl: 3rem;
    --space-3xl: 4rem;
    
    /* Border radius */
    --radius-sm: 0.25rem;
    --radius-md: 0.5rem;
    --radius-lg: 0.75rem;
    --radius-xl: 1rem;
    
    /* Transitions */
    --transition-fast: 150ms ease;
    --transition-normal: 250ms ease;
    --transition-slow: 350ms ease;
  }

  /* Dark theme colors - Version slate foncé comme avant */
  [data-theme="dark"] {
    --color-text: 248 250 252; /* Blanc cassé */
    --color-text-muted: 148 163 184; /* Gris slate */
    --color-text-inverse: 15 23 42; /* Slate très foncé */
    
    --color-background: 2 6 23; /* Slate 950 - très foncé */
    --color-surface: 15 23 42; /* Slate 900 */
    --color-surface-variant: 30 41 59; /* Slate 800 */
    
    --color-border: 51 65 85; /* Slate 700 */
    --color-border-muted: 30 41 59; /* Slate 800 */
    
    --color-shadow: 0 0 0; /* Noir pour les ombres */
  }

  /* Base styles */
  * {
    box-sizing: border-box;
  }

  html {
    font-family: var(--font-sans);
    scroll-behavior: smooth;
  }

  body {
    margin: 0;
    background-color: rgb(var(--color-background));
    color: rgb(var(--color-text));
    line-height: 1.6;
    transition: background-color var(--transition-normal), color var(--transition-normal);
  }

  /* Typography */
  h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-serif);
    font-weight: 600;
    line-height: 1.2;
    margin-top: 0;
    color: rgb(var(--color-text));
  }

  h1 { font-size: 3.5rem; font-weight: 700; }
  h2 { font-size: 2.5rem; font-weight: 600; }
  h3 { font-size: 2rem; font-weight: 600; }
  h4 { font-size: 1.5rem; font-weight: 500; }
  h5 { font-size: 1.25rem; font-weight: 500; }
  h6 { font-size: 1.125rem; font-weight: 500; }

  p {
    margin-top: 0;
    margin-bottom: 1rem;
  }

  /* Links */
  a {
    color: rgb(var(--color-primary));
    text-decoration: none;
    transition: opacity var(--transition-fast);
  }

  a:hover {
    opacity: 0.8;
  }

  /* Buttons */
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 1rem 2rem;
    border: none;
    border-radius: 2rem;
    font-size: 0.9rem;
    font-weight: 600;
    text-decoration: none;
    cursor: pointer;
    transition: all var(--transition-normal);
    white-space: nowrap;
    position: relative;
    overflow: hidden;
  }

  .btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }

  .btn:hover::before {
    left: 100%;
  }

  .btn-primary {
    background: linear-gradient(135deg, rgb(var(--color-primary)), rgb(var(--color-secondary)));
    color: rgb(var(--color-text-inverse));
    box-shadow: 0 10px 25px rgb(var(--color-primary) / 0.3);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 15px 35px rgb(var(--color-primary) / 0.4);
  }

  .btn-secondary {
    background: transparent;
    color: rgb(var(--color-text));
    border: 2px solid rgb(var(--color-primary) / 0.5);
    backdrop-filter: blur(10px);
  }

  .btn-secondary:hover {
    background: rgb(var(--color-primary) / 0.1);
    border-color: rgb(var(--color-primary));
    transform: translateY(-2px);
  }

  .btn-large {
    padding: 1rem 2rem;
    font-size: 1rem;
  }

  /* Container */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* Section titles */
  .section-title {
    text-align: center;
    margin-bottom: 2rem;
    color: rgb(var(--color-text));
  }

  /* Code blocks */
  pre, code {
    font-family: var(--font-mono);
    background: rgb(var(--color-surface-variant));
    border-radius: var(--radius-sm);
  }

  pre {
    padding: 1rem;
    overflow-x: auto;
    line-height: 1.5;
  }

  code:not(pre code) {
    padding: 0.125rem 0.25rem;
    font-size: 0.875em;
  }

  /* Focus styles */
  :focus-visible {
    outline: 2px solid rgb(var(--color-primary));
    outline-offset: 2px;
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }

  /* Print styles */
  @media print {
    .no-print {
      display: none !important;
    }
  }
</style>